/* Generated By:JavaCC: Do not edit this line. FormulaParser.java */
        package de.uka.aifb.com.systemDynamics.parser;

        import de.uka.aifb.com.systemDynamics.model.*;
        import java.io.*;
        import java.util.HashMap;

        /**
    * This class implements a parser for node formulas.
    *
    * The parser was created using JavaCC and the following grammar:
    *
    * <pre>
    * <code>
    * Expression -> Term ( PLUS Term | MINUS Term )*
    * Term -> Primary ( TIMES Primary | DIVIDE Primary )*
    * Primary -> NODE | OPEN_PAR Expression CLOSE_PAR
    * </code>
    * </pre>
    * 
    * @author Joachim Melcher, University of Karlsruhe, AIFB
    * @version 1.0
    */
        
        public class FormulaParser implements FormulaParserConstants {

           private HashMap<Integer, AuxiliaryNode> id2auxiliaryNode;
      private HashMap<Integer, ConstantNode> id2constantNode;
      private HashMap<Integer, LevelNode> id2levelNode;

                public static ASTElement parseFormula(String parseString,
                                                      HashMap<Integer, AuxiliaryNode> id2auxiliaryNode,
                                                      HashMap<Integer, ConstantNode> id2constantNode,
                                                      HashMap<Integer, LevelNode> id2levelNode)
                                throws ParseException, TokenMgrError {
                   if (id2auxiliaryNode == null) {
                        throw new IllegalArgumentException("'id2auxiliaryNode' must not be null.");
                   }
                   if (id2constantNode == null) {
                        throw new IllegalArgumentException("'id2constantNode' must not be null.");
                   }
                   if (id2levelNode == null) {
                        throw new IllegalArgumentException("'id2levelNode' must not be null.");
                   }

                        Reader reader = new StringReader(parseString);
                        FormulaParser parser = new FormulaParser(reader);

                   parser.id2auxiliaryNode = id2auxiliaryNode;
                   parser.id2constantNode = id2constantNode;
                   parser.id2levelNode = id2levelNode;

                        return parser.Start();
                }

  final public ASTElement Start() throws ParseException {
        ASTElement formula;
    formula = Expression();
                {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  final public ASTElement Expression() throws ParseException {
        ASTElement formula;
        ASTElement tempFormula;
    formula = Term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        tempFormula = Term();
                        formula = new ASTPlus(formula, tempFormula);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        tempFormula = Term();
                        formula = new ASTMinus(formula, tempFormula);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  final public ASTElement Term() throws ParseException {
        ASTElement formula;
        ASTElement tempFormula;
    formula = Primary();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        tempFormula = Primary();
                        formula = new ASTMultiply(formula, tempFormula);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        tempFormula = Primary();
                        formula = new ASTDivide(formula, tempFormula);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  final public ASTElement Primary() throws ParseException {
        ASTElement formula;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUXILIARY_NODE:
    case CONSTANT_NODE:
    case LEVEL_NODE:
      formula = Node();
      break;
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      formula = Expression();
      jj_consume_token(CLOSE_PAR);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  final public ASTElement Node() throws ParseException {
        Token t;
        ASTElement formula;
        int id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUXILIARY_NODE:
      jj_consume_token(AUXILIARY_NODE);
      jj_consume_token(OPEN_PAR);
      t = jj_consume_token(ID);
      jj_consume_token(CLOSE_PAR);
                id = Integer.parseInt(t.image);
                formula = id2auxiliaryNode.get(id);
                if (formula != null) {
                        {if (true) return formula;}
                } else {
                        {if (true) throw new ParseException("Auxiliary node with Id " + id + " does not exist.");}
        }
      break;
    case CONSTANT_NODE:
      jj_consume_token(CONSTANT_NODE);
      jj_consume_token(OPEN_PAR);
      t = jj_consume_token(ID);
      jj_consume_token(CLOSE_PAR);
                id = Integer.parseInt(t.image);
                formula = id2constantNode.get(id);
                if (formula != null) {
                        {if (true) return formula;}
                } else {
                        {if (true) throw new ParseException("Constant node with Id " + id + " does not exist.");}
        }
      break;
    case LEVEL_NODE:
      jj_consume_token(LEVEL_NODE);
      jj_consume_token(OPEN_PAR);
      t = jj_consume_token(ID);
      jj_consume_token(CLOSE_PAR);
                id = Integer.parseInt(t.image);
                formula = id2levelNode.get(id);
                if (formula != null) {
                        {if (true) return formula;}
                } else {
                        {if (true) throw new ParseException("Level node with Id " + id + " does not exist.");}
        }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public FormulaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc,0xc,0x30,0x30,0x740,0x700,};
   }

  /** Constructor with InputStream. */
  public FormulaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FormulaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FormulaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FormulaParser(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
